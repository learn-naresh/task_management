<div class="py-4 px-4 actions text-right mb-4">
  <%= link_to 'New Task', new_task_path, class: "text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800" %>
</div>

<div>
  <% if @tasks.empty? %>
    <p>No tasks found for the specified filters.</p>
  <% else %>
    <div class="relative overflow-x-auto shadow-md sm:rounded-lg">
      <div id="kanban-board" class="flex justify-between">
        <div class="kanban-column">
          <h2>Backlog</h2>
          <div id="backlog" class="kanban-list">
            <% @backlog_tasks.each do |task| %>
              <div class="task-card" data-task-id="<%= task.id %>">
                <h3><%= task.title %></h3>
                <p><%= task.description %></p>
                <span class="status">Status: <%= task.status.capitalize %></span>
              </div>
            <% end %>
          </div>
        </div>
        <div class="kanban-column">
          <h2>In Progress</h2>
          <div id="in_progress" class="kanban-list">
            <% @in_progress_tasks.each do |task| %>
              <div class="task-card" data-task-id="<%= task.id %>">
                <h3><%= task.title %></h3>
                <p><%= task.description %></p>
                <span class="status">Status: <%= task.status.capitalize %></span>
              </div>
            <% end %>
          </div>
        </div>
        <div class="kanban-column">
          <h2>Done</h2>
          <div id="done" class="kanban-list">
            <% @completed_tasks.each do |task| %>
              <div class="task-card" data-task-id="<%= task.id %>">
                <h3><%= task.title %></h3>
                <p><%= task.description %></p>
                <span class="status">Status: <%= task.status.capitalize %></span>
              </div>
            <% end %>
          </div>
        </div>
      </div>
    </div>
  <% end %>
</div>

<script>
  const updateTaskCardStatus = (taskId, newStatus) => {
    const taskCard = document.querySelector(`.task-card[data-task-id="${taskId}"]`);
    if (taskCard) {
      const statusElement = taskCard.querySelector('.status');
      if (statusElement) {
        statusElement.textContent = `Status: ${newStatus.charAt(0).toUpperCase() + newStatus.slice(1)}`;
      }
    }
  };

  document.addEventListener('DOMContentLoaded', () => {
    const columns = ['backlog', 'in_progress', 'done'];

    columns.forEach((column) => {
      const element = document.getElementById(column);

      new Sortable(element, {
        group: 'kanban',
        animation: 150,
        onEnd: (evt) => {
          const targetColumnId = evt.to.id;
          if (targetColumnId === column) {
            // Do nothing if dragged to the same column
            return;
          }

          let newStatus;
          switch (column) {
            case 'backlog':
              newStatus = targetColumnId === 'in_progress' ? 'in_progress' : 'done';
              break;
            case 'in_progress':
              newStatus = targetColumnId === 'done' ? 'done' : 'backlog';
              break;
            case 'done':
              newStatus = targetColumnId === 'in_progress' ? 'in_progress' : 'backlog';
              break;
            default:
              newStatus = '';
              break;
          }
          handleTaskMovement(evt.item, newStatus);
        },
      });
    });
  });

  const handleTaskMovement = async (item, newStatus) => {
    const taskId = item.dataset.taskId;
    console.log(`Moving task ${taskId} to ${newStatus}`);
    try {
      const response = await fetch(`/tasks/${taskId}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content,
        },
        body: JSON.stringify({ task: { status: newStatus } }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      console.log(data);
      updateTaskCardStatus(taskId, newStatus);

    } catch (error) {
      console.error('Error:', error);
    }
  };

</script>
