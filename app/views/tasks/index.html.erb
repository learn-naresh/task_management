<div class="py-4 px-4 actions text-right mb-4">
  <%= link_to 'New Task', new_task_path, class: "text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800" %>
</div>

<div>
  <% if @tasks.empty? %>
    <p>No tasks found for the specified filters.</p>
  <% else %>
    <div class="relative overflow-x-auto shadow-md sm:rounded-lg">
      <table class='w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400'>
        <div id="kanban-board" class="flex justify-between">
        <div class="kanban-column">
          <h2>Backlog</h2>
          <div id="backlog" class="kanban-list">
            <% @backlog_tasks.each do |task| %>
              <%= render 'task_card', task: task %>
            <% end %>
          </div>
        </div>
        <div class="kanban-column">
          <h2>In Progress</h2>
          <div id="in-progress" class="kanban-list">
            <% @in_progress_tasks.each do |task| %>
              <%= render 'task_card', task: task %>
            <% end %>
          </div>
        </div>
        <div class="kanban-column">
          <h2>Done</h2>
          <div id="done" class="kanban-list">
            <% @completed_tasks.each do |task| %>
              <%= render 'task_card', task: task %>
            <% end %>
          </div>
        </div>
      </div>
      </table>
    </div>
  <% end %>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const backlog = document.getElementById('backlog');
    const inProgress = document.getElementById('in-progress');
    const done = document.getElementById('done');

    new Sortable(backlog, {
      group: 'kanban',
      animation: 150,
      onEnd: (evt) => {
        handleTaskMovement(evt.item, 'backlog');
      },
    });

    new Sortable(inProgress, {
      group: 'kanban',
      animation: 150,
      onEnd: (evt) => {
        handleTaskMovement(evt.item, 'in-progress');
      },
    });

    new Sortable(done, {
      group: 'kanban',
      animation: 150,
      onEnd: (evt) => {
        handleTaskMovement(evt.item, 'done');
      },
    });

    const handleTaskMovement = async (item, status) => {
      const taskId = item.dataset.taskId;
      await fetch(`/tasks/${taskId}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content,

        },
        body: JSON.stringify({ task: { status: status } }),
      })
        .then(response => response.json())
        .then(data => console.log(data)) // Update UI or handle response as needed
        .catch(error => console.error('Error:', error));
    }
  });
</script>
